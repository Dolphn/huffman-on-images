#BlueJ class context
comment0.target=HuffmanAlgorithm
comment0.text=\n\ Die\ Klasse\ besitzt\ eine\ Methode\ zur\ Kompression\ und\ eine\ Methode\ zur\ Dekompression\ eines\ Bilds.\n\ Das\ Kompressionsverfahren\ ist\ die\ Huffman-Kodierung.\n\ \n\ Die\ Klasse\ besitzt\ auch\ andere\ Methoden,\ die\ f\u00FCr\ die\ Operationen\ notwendig\ sind.\n\ \n\ \n\ Gestartet\ wird\ das\ Programm\ \u00FCber\ die\ Main-Methode\ und\ der\ Benutzer\ w\u00E4hlt\ seine\ Datei\ aus.\n\ \!ACHTUNG\!\ Nur\ .jpeg,\ .jpg\ und\ .png\ -dateien\ zur\ Kodierung\ erlaubt.\ Diese\ sind\ in\ dem\ beigef\u00FCgten\ Ordner\ "Testimages"\!\n\ \n\ \n\ @author\ (Cornelius\ Engel)\n\ @version\ (17.03.2020)\n
comment1.params=args
comment1.target=void\ main(java.lang.String[])
comment1.text=\n\ Main-Methode.\ \n\ Hier\u00FCber\ wird\ ein\ Objekt\ der\ Klasse\ erstellt\ und\ dessen\ go()-Methode\ aufgerufen.\n
comment10.params=b\ h\ hashmapBools
comment10.target=void\ traverse(BinaryTree,\ java.util.HashMap,\ java.util.LinkedList)
comment10.text=\n\ Alle\ Pfade,\ die\ der\ Baum\ besitzt\ werden\ in\ dieser\ Methode\ in\ eine\ Hashmap\ geschrieben.\ Der\ Pfad\ ist\ jeweils\ der\ Value\ zum\ Farbwert,\ dem\ Key.\n\ Der\ Pfad\ wird\ dabei\ fortlaufend\ aktualisiert\ und\ wenn\ ein\ Blatt\ erreicht\ wird,\ wird\ der\ Wert\ in\ die\ Hashmap\ eingetragen\ und\ die\ Liste\ mit\ dem\ \n\ aktuellen\ Pfad\ als\ Kopie\ mit\ eingefuegt.\n\ Die\ Methode\ arbeitet\ rekursiv.\n\ \n\ @param\ b\n\ \ \ \ \ \ \ \ \ \ Der\ Baum,\ der\ traversiert\ wird\n\ \ \ \ \ \ \ \ \ \ \n\ @param\ h\n\ \ \ \ \ \ \ \ \ \ Die\ Hashmap,\ in\ die\ die\ Werte\ mit\ den\ Pfaden\ geschrieben\ werden\n\ \ \ \ \ \ \ \ \ \ \n\ @param\ hashmapBools\n\ \ \ \ \ \ \ \ \ \ Die\ Liste,\ die\ den\ aktuellen\ Pfad\ speichert,\ der\ sich\ immer\ veraendert.\n
comment11.params=list
comment11.target=void\ generateTree(java.util.LinkedList)
comment11.text=\n\ Solange\ die\ Liste\ groe\u00DFer\ als\ 1\ ist,\ wird\ die\ Liste\ sortiert\ und\ die\ ersten\ beiden\ Baeume\ zu\ den\ Soehnen\ eines\ neuen\ Baums.\n\ Das\ Objekt\ in\ diesem\ Baum\ nimmt\ sie\ Summe\ der\ Haeufigkeiten\ der\ Objekte\ seiner\ Soehne\ als\ eigene.\ \n\ Au\u00DFerdem\ bekommt\ das\ Objekt\ im\ neuen\ Baum\ die\ Tiefe\ des\ Baums.\n\ Ist\ die\ Liste\ zu\ Beginn\ schon\ nur\ 1\ gro\u00DF,\ wird\ ein\ neuer\ Baum\ erstellt,\ der\ den\ vorhandenen\ Baum\ nur\ als\ linken\ Sohn\ nimmt.\n\ \n\ @param\ list\n\ \ \ \ \ \ \ \ \ \ Die\ Liste,\ in\ der\ ein\ Baum\ erstellt\ werden\ soll\n\ \n
comment2.params=
comment2.target=void\ go()
comment2.text=\n\ Die\ Methode\ \u00F6ffnet\ ein\ Fenster,\ wo\ die\ gew\u00FCnschte\ Datei\ ausgewaehlt\ werden\ kann.\n\ Es\ wird\ ueberprueft,\ ob\ das\ Dateiformat\ valide\ ist.\n\ Ausserdem\ wird\ die\ Encoding-Methode\ aufgerufen,\ wenn\ es\ eine\ .jpg,\ .jpeg\ oder\ .png\ Datei\ ist\n\ andernfalls,\ wenn\ es\ eine\ .hffmn\ Datei\ ist,\ wird\ die\ Decoding-Methode\ aufgerufen,\n\ \n\ sonst\ wiederholt\ sich\ der\ Dateiauswahlvorgang.\n\ \n
comment3.params=path
comment3.target=void\ encodeImage(java.lang.String)
comment3.text=\n\ Methode\ zur\ Bildkompression\n\ \n\ @param\ path\n\ \ \ \ \ \ \ \ \ \ der\ \u00FCbergebene\ Pfad\ der\ Datei\ wird\ ben\u00F6tigt,\ um\ sie\ zu\ oeffnen\ und\ am\ Ende\ die\ komprimierte\ Version\ zu\ speichern.\n
comment4.params=path
comment4.target=void\ decodeImage(java.lang.String)
comment4.text=\n\ Methode\ zur\ Dekompression\ von\ mit\ Huffman\ koprimierten\ Bildern\n\ \n\ @param\ path\n\ \ \ \ \ \ \ \ \ \ der\ \u00FCbergebene\ Pfad\ der\ Datei\ wird\ ben\u00F6tigt,\ um\ sie\ zu\ oeffnen\ und\ am\ Ende\ die\ entkomprimierte\ Version\ zu\ speichern.\n
comment5.params=rest
comment5.target=boolean[]\ fromCharToBool(int)
comment5.text=\n\ Ein\ Integer\ mit\ einem\ maximalen\ Wert\ von\ 255\ wird\ binaer\ aufgesplittet.\n\ Statt\ 0\ und\ 1\ sind\ es\ booleans.\n\ Zur\u00FCckgegeben\ wird\ es\ in\ einem\ Array.\n\ \n\ @param\ rest\n\ \ \ \ \ \ \ \ \ \ Die\ Groe\u00DFe\ des\ integers\n\ \ \ \ \ \ \ \ \ \ \n\ @return\ b\n\ \ \ \ \ \ \ \ \ \ Das\ boolean-Array,\ indem\ die\ Zahl\ binaer\ aufgeteilt\ wurde\n
comment6.params=b
comment6.target=java.lang.String\ printChars(java.util.LinkedList)
comment6.text=\n\ Alle\ Booleans\ einer\ Liste,\ aber\ maximal\ acht\ zusammen\ werden\ zu\ Zahlenwerten\ als\ chars\ verrechnet.\n\ Dies\ wird\ in\ binaerer\ Zaehlweise\ gemacht\n\ \n\ @param\ b\n\ \ \ \ \ \ \ \ \ \ Die\ Liste\ mit\ den\ Booleans\n\ \ \ \ \ \ \ \ \ \ \n\ @return\ s\n\ \ \ \ \ \ \ \ \ \ der\ String,\ mit\ allen\ aus\ den\ Booleans\ gebauten\ Strings\n
comment7.params=list
comment7.target=void\ sortList(java.util.LinkedList)
comment7.text=\n\ Die\ uebergebene\ Liste\ wird\ sortiert.\n\ Die\ prioritaet\ liegt\ folgend\:\n\ \ \ \ \ \ Haeufigkeit\ des\ ColorManagerobjekts\ des\ Baumknotens\n\ \ \ \ \ \ Tiefe\ des\ ColorManagerobjekts\ des\ Baumknotens\n\ \n\ Angewendet\ wird\ dabei\ der\ aus\ der\ Schule\ bekannte\ Quicksort.\n\ \n\ @param\ list\n\ \ \ \ \ \ \ \ \ \ Die\ zu\ sortierende\ Liste\n
comment8.params=list\ color
comment8.target=void\ insertColorInList(java.util.LinkedList,\ java.awt.Color)
comment8.text=\n\ Die\ Methode\ fuegt\ eine\ Farbe\ in\ die\ Liste\ ein,\ sofern\ sie\ noch\ nicht\ drin\ ist.\n\ Andernfalls\ wird\ die\ Haufigkeit\ von\ dem\ ColorManager,\ der\ diesen\ Farbwert\ enthaelt,\ erhoeht.\n\ \n\ @param\ list\n\ \ \ \ \ \ \ \ \ \ Die\ Liste,\ in\ die\ die\ Farbe\ eingefuegt\ werden\ soll.\n\ \ \ \ \ \ \ \ \ \ \n\ @param\ color\n\ \ \ \ \ \ \ \ \ \ Die\ Farbe,\ die\ eingefuegt\ werden\ soll.\n
comment9.params=list\ c
comment9.target=int\ getColor(java.util.LinkedList,\ java.awt.Color)
comment9.text=\n\ Der\ Farbwert\ wird\ anhand\ der\ Liste\ und\ dem\ Objekt\ von\ Color\ ermittelt\ und\ zurueckgegeben.\n\ Ist\ die\ Liste\ nicht\ bekannt,\ wird\ -1\ returnt.\n\ \n\ @param\ list\n\ \ \ \ \ \ \ \ \ \ Die\ Liste,die\ die\ benoetigt\ wird,\ um\ zu\ wissen,\ um\ welche\ Farbe\ es\ sich\ handelt\n\ \ \ \ \ \ \ \ \ \ \n\ @param\ c\n\ \ \ \ \ \ \ \ \ \ Das\ Colorobjekt,\ aus\ dem\ der\ bestimmte\ extrahiert\ werden\ soll\n\ \ \ \ \ \ \ \ \ \ \n\ @return\ den\ gewuenschten\ Farbwert\n
numComments=12
